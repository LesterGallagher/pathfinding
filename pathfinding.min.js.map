{"version":3,"sources":[" [synthetic:base] "," [synthetic:util/defines] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] ","node_modules/heap-tree/heaptree.js","src/heaptree.js","src/pathfinding.js","src/index.js"],"names":["Heap","constructor","items","seek","MaxHeap","selector","push","item","i","length","Math","floor","t","pop","ret","lowest","delete","indexOf","heapify","arr","MinHeap","exports","GridPath","width","height","len","goalI","startI","find","closedSet","cameFrom","gScore","fScore","openSet","index","Infinity","heuristicCostEstimateSquared","currentI","reconstructPath","neighboursI","neighbourI","tentativeGscore","counter","path","nodesI","Array","nodeI","node1I","node2I","pow","$jscompDefaultExport","window"],"mappings":"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","file":"pathfinding.min.js","sourcesContent":[null,null,null,null,null,"\r\nclass Heap {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    seek() { return this.items[0]; }\r\n}\r\n\r\nexport class MaxHeap extends Heap {\r\n    constructor(selector) {\r\n        super();\r\n        this.selector = selector;\r\n    }\r\n\r\n    push(item) {\r\n        let i = this.items.length;\r\n        this.items.push(item);\r\n        while (i > 0 && this.selector(this.items[Math.floor((i + 1) / 2 - 1)]) < this.selector(this.items[i])) {\r\n            let t = this.items[i];\r\n            this.items[i] = this.items[Math.floor((i+1)/2-1)];\r\n            this.items[Math.floor((i+1)/2-1)] = t;\r\n            i = Math.floor((i + 1) / 2 - 1);\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if (this.items.length <= 1) return this.items.pop();\r\n        const ret = this.items[0];\r\n        // heapify\r\n        this.items[0] = this.items.pop();\r\n        let i = 0;\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) > this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) < this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    delete(item) {\r\n        let i = this.items.indexOf(item);\r\n        // heapify\r\n        this.items[i] = this.items.pop();\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) > this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) < this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n    }\r\n\r\n    heapify(arr) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.push(arr[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class MinHeap extends Heap {\r\n    constructor(selector) {\r\n        super();\r\n        this.selector = selector;\r\n    }\r\n\r\n    push(item) {\r\n        let i = this.items.length;\r\n        this.items.push(item);\r\n        while (i > 0 && this.selector(this.items[Math.floor((i + 1) / 2 - 1)]) > this.selector(this.items[i])) {\r\n            let t = this.items[i];\r\n            this.items[i] = this.items[Math.floor((i+1)/2-1)];\r\n            this.items[Math.floor((i+1)/2-1)] = t;\r\n            i = Math.floor((i + 1) / 2 - 1);\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if (this.items.length <= 1) return this.items.pop();\r\n        const ret = this.items[0];\r\n        this.items[0] = this.items.pop();\r\n        let i = 0;\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) < this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) > this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    delete(item) {\r\n        let i = this.items.indexOf(item);\r\n        // heapify\r\n        this.items[i] = this.items.pop();\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) < this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) > this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n    }\r\n\r\n    heapify(arr) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.push(arr[i]);\r\n        }\r\n    }\r\n}\r\n\r\n","\r\nclass Heap {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    seek() { return this.items[0]; }\r\n}\r\n\r\nexport class MaxHeap extends Heap {\r\n    constructor(selector) {\r\n        super();\r\n        this.selector = selector;\r\n    }\r\n\r\n    push(item) {\r\n        let i = this.items.length;\r\n        this.items.push(item);\r\n        while (i > 0 && this.selector(this.items[Math.floor((i + 1) / 2 - 1)]) < this.selector(this.items[i])) {\r\n            let t = this.items[i];\r\n            this.items[i] = this.items[Math.floor((i+1)/2-1)];\r\n            this.items[Math.floor((i+1)/2-1)] = t;\r\n            i = Math.floor((i + 1) / 2 - 1);\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if (this.items.length <= 1) return this.items.pop();\r\n        const ret = this.items[0];\r\n        // heapify\r\n        this.items[0] = this.items.pop();\r\n        let i = 0;\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) > this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) < this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    delete(item) {\r\n        let i = this.items.indexOf(item);\r\n        // heapify\r\n        this.items[i] = this.items.pop();\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) > this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) < this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n    }\r\n\r\n    heapify(arr) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.push(arr[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class MinHeap extends Heap {\r\n    constructor(selector) {\r\n        super();\r\n        this.selector = selector;\r\n    }\r\n\r\n    push(item) {\r\n        let i = this.items.length;\r\n        this.items.push(item);\r\n        while (i > 0 && this.selector(this.items[Math.floor((i + 1) / 2 - 1)]) > this.selector(this.items[i])) {\r\n            let t = this.items[i];\r\n            this.items[i] = this.items[Math.floor((i+1)/2-1)];\r\n            this.items[Math.floor((i+1)/2-1)] = t;\r\n            i = Math.floor((i + 1) / 2 - 1);\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if (this.items.length <= 1) return this.items.pop();\r\n        const ret = this.items[0];\r\n        this.items[0] = this.items.pop();\r\n        let i = 0;\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) < this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) > this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    delete(item) {\r\n        let i = this.items.indexOf(item);\r\n        // heapify\r\n        this.items[i] = this.items.pop();\r\n        while (true) {\r\n            let lowest = this.selector(this.items[(i + 1) * 2]) < this.selector(this.items[(i + 1) * 2 - 1]) \r\n                ? (i + 1) * 2 : (i + 1) * 2 - 1;\r\n            if (this.selector(this.items[i]) > this.selector(this.items[lowest])) {\r\n                let t = this.items[i];\r\n                this.items[i] = this.items[lowest];\r\n                this.items[lowest] = t;\r\n                i = lowest             \r\n            } else break;\r\n        }\r\n    }\r\n\r\n    heapify(arr) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.push(arr[i]);\r\n        }\r\n    }\r\n}\r\n\r\n","\r\nimport { MinHeap } from './heaptree.js';\r\n\r\nexport class GridPath {\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.len = width * height;\r\n        this.startI = null;\r\n        this.goalI = null;\r\n    }\r\n\r\n    find(startI, goalI) {\r\n        this.startI = startI;\r\n        this.goalI = goalI;\r\n\r\n        const closedSet = {};\r\n\r\n        const cameFrom = {};\r\n\r\n        const gScore = {};\r\n        gScore[startI] = 0;\r\n\r\n        const fScore = {};\r\n        const openSet = new MinHeap(index => fScore[index] || Infinity);\r\n        fScore[startI] = this.heuristicCostEstimateSquared(startI, goalI);\r\n        openSet.push(startI);\r\n\r\n        while(openSet.items.length > 0) {\r\n            const currentI = openSet.pop();\r\n\r\n            if (currentI === goalI) {\r\n                // done\r\n                return this.reconstructPath(cameFrom, currentI);\r\n            }\r\n\r\n            closedSet[currentI] = true;\r\n            const neighboursI = this.neighboursI(currentI);\r\n\r\n            for (let i = 0; i < neighboursI.length; i++) {\r\n                const neighbourI = neighboursI[i];\r\n                \r\n                if (neighbourI < 0 || neighbourI > this.len || closedSet[neighbourI])\r\n                    continue;\r\n\r\n                const tentativeGscore = gScore[currentI] + 1;\r\n\r\n                if (!fScore[neighbourI]) {\r\n                    cameFrom[neighbourI] = currentI;\r\n                    gScore[neighbourI] = tentativeGscore;\r\n                    fScore[neighbourI] = tentativeGscore + this.heuristicCostEstimateSquared(neighbourI, goalI);\r\n                    openSet.push(neighbourI);\r\n                }\r\n                else {\r\n                    if (tentativeGscore >= gScore[neighbourI])\r\n                        continue;\r\n                    else {\r\n                        cameFrom[neighbourI] = currentI;\r\n                        gScore[neighbourI] = tentativeGscore;\r\n                        fScore[neighbourI] = tentativeGscore + this.heuristicCostEstimateSquared(neighbourI, goalI);\r\n                        // update openset\r\n                        openSet.delete(neighbourI);\r\n                        openSet.push(neighbourI);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    reconstructPath(cameFrom, currentI) {\r\n        let counter = 0;\r\n        const path = [];\r\n        path.push(currentI);\r\n        while(currentI !== this.startI) {\r\n            path.push(currentI);\r\n            currentI = cameFrom[currentI];\r\n            if (counter++ > 999999) return null;\r\n        }\r\n        path.push(this.startI);\r\n        let nodesI = new Array(path.length);\r\n        for(let i = 0; i < path.length; i++) {\r\n            nodesI[i] = path[path.length - 1 - i];\r\n        }\r\n        return nodesI;\r\n    }\r\n\r\n    neighboursI(nodeI) {\r\n        // if (this.diagonal)\r\n        //     return [\r\n        //         nodeI - this.width,\r\n        //         nodeI - this.width + 1,\r\n        //         nodeI + 1,\r\n        //         nodeI + this.width + 1,\r\n        //         nodeI + this.width,\r\n        //         nodeI + this.width - 1,\r\n        //         nodeI - 1,\r\n        //         nodeI - this.width -1,\r\n        //     ];\r\n        // else {\r\n            return [\r\n                nodeI - this.width,\r\n                nodeI + 1,\r\n                nodeI + this.width,\r\n                nodeI - 1,\r\n            ]\r\n        // }\r\n    }\r\n\r\n    heuristicCostEstimateSquared(node1I, node2I) {\r\n        return Math.pow(node2I % this.width - node1I % this.width, 2) \r\n            + Math.pow(Math.floor(node2I / this.width) - Math.floor(node1I / this.width), 2);\r\n    }\r\n}\r\n","\r\nimport { GridPath } from './pathfinding.js';\r\nexport default { GridPath };\r\n\r\n\r\n// const test = new Array(8 * 8).fill(null).map((x, i) => `${i%8}x${Math.floor(i/8)}`);\r\n\r\n// const path = new GridPath(test, 8, 8, 0, 7 + 8 * 7);\r\n// console.log(path);\r\n\r\nwindow.GridPath = GridPath;\r\n"]}